#include <iostream>
#include <vector>

// Класс для представления множества целых чисел
class Mnojestvo {
private:
    // Вектор для хранения элементов множества
    std::vector<int> элементы;

    // Метод для проверки, содержится ли элемент в множестве
    bool содержит(int элемент) const {
        for (size_t i = 0; i < элементы.size(); ++i) {
            if (элементы[i] == элемент) {
                return true;
            }
        }
        return false;
    }

public:
    // Конструктор по умолчанию
    Mnojestvo() {}

    // Конструктор с начальными элементами
    Mnojestvo(const std::vector<int>& начальныеЭлементы) {
        for (int элемент : начальныеЭлементы) {
            добавить(элемент);
        }
    }

    // Метод для добавления элемента в множество
    void добавить(int элемент) {
        if (!содержит(элемент)) {
            элементы.push_back(элемент);
        }
    }

    // Оператор доступа по индексу
    int& operator[](size_t индекс) {
        if (индекс >= элементы.size()) {
            throw std::out_of_range("Индекс за пределами диапазона");
        }
        return элементы[индекс];
    }

    // Оператор для получения размера множества
    size_t operator()() const {
        return элементы.size();
    }

    // Оператор для объединения множеств
    Mnojestvo operator+(const Mnojestvo& другоеМножество) const {
        Mnojestvo результат = *this;
        for (size_t i = 0; i < другоеМножество.элементы.size(); ++i) {
            результат.добавить(другоеМножество.элементы[i]);
        }
        return результат;
    }

    // Класс итератора для перебора элементов множества
    class Итератор {
    private:
        Mnojestvo* множество;
        size_t индекс;

    public:
        // Конструктор итератора
        Итератор(Mnojestvo* множество, size_t начальныйИндекс) : множество(множество), индекс(начальныйИндекс) {}

        // Оператор для получения текущего элемента
        int operator*() const {
            return множество->элементы[индекс];
        }

        // Оператор для перехода к следующему элементу
        Итератор& operator++() {
            ++индекс;
            return *this;
        }

        // Оператор для сравнения итераторов на неравенство
        bool operator!=(const Итератор& другойИтератор) const {
            return (множество != другойИтератор.множество) || (индекс != другойИтератор.индекс);
        }

        // Оператор для сравнения итераторов на равенство
        bool operator==(const Итератор& другойИтератор) const {
            return (множество == другойИтератор.множество) && (индекс == другойИтератор.индекс);
        }

    };

    // Метод для получения итератора начала множества
    Итератор начало() {
        return Итератор(this, 0);
    }

    // Метод для получения итератора конца множества
    Итератор конец() {
        return Итератор(this, элементы.size());
    }

    // Метод для вывода элементов множества
    void вывести() const {
        std::cout << "{ ";
        for (size_t i = 0; i < элементы.size(); ++i) {
            std::cout << элементы[i];
            if (i < элементы.size() - 1) {
                std::cout << ", ";
            }
        }
        std::cout << " }" << std::endl;
    }

    // Метод для удаления элемента из множества
    void удалить(int элемент) {
        for (size_t i = 0; i < элементы.size(); ++i) {
            if (элементы[i] == элемент) {
                элементы.erase(элементы.begin() + i);
                return; // Удаляем только первый найденный элемент
            }
        }
    }
};


int main() {
    setlocale(LC_ALL, "RU");
    // Создаем два множества
    Mnojestvo множество1({ 1, 2, 3, 4, 5 });
    Mnojestvo множество2({ 3, 5, 6, 7, 8 });

    // Выводим множества
    std::cout << "Множество 1: ";
    множество1.вывести();
    std::cout << "Множество 2: ";
    множество2.вывести();

    // Получаем элемент по индексу
    std::cout << "Элемент с индексом 2 в множестве 1: " << множество1[2] << std::endl;

    // Получаем размер множества
    std::cout << "Размер множества 1: " << множество1() << std::endl;

    // Объединяем множества
    Mnojestvo множество3 = множество1 + множество2;
    std::cout << "Множество 1 + Множество 2: ";
    множество3.вывести();

    // Итерируемся по объединенному множеству
    std::cout << "Итерируемся по множеству 3: ";
    for (Mnojestvo::Итератор it = множество3.начало(); it != множество3.конец(); ++it) {
        std::cout << *it << " ";
    }
    std::cout << std::endl;

    // Удаляем элемент из множества
    множество3.удалить(3);
    std::cout << "Множество 3 после удаления элемента 3: ";
    множество3.вывести();

    return 0;
}
w